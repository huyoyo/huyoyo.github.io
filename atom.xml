<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[胡某某同学]]></title>
  <link href="http://huyoyo.github.io/atom.xml" rel="self"/>
  <link href="http://huyoyo.github.io/"/>
  <updated>2017-09-04T23:53:01+08:00</updated>
  <id>http://huyoyo.github.io/</id>
  <author>
    <name><![CDATA[胡某某同学啊]]></name>
    <email><![CDATA[hujieqiong@sjtu.edu.cn]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[记录一道面试题－柯里化(currying)]]></title>
    <link href="http://huyoyo.github.io/blog/2017/09/04/ji-lu-%5B%3F%5D-dao-mian-shi-ti-%5Bnil%5Dke-li-hua-currying/"/>
    <updated>2017-09-04T19:28:13+08:00</updated>
    <id>http://huyoyo.github.io/blog/2017/09/04/ji-lu-[?]-dao-mian-shi-ti-[nil]ke-li-hua-currying</id>
    <content type="html"><![CDATA[<p>&nbsp;&nbsp;大美团今日一面，首先是一道简答题，问一个add(x)函数可以打印出x的值，问add(1,2)会输出什么，如果是输出add(1)(2)呢？如何实现 add(1)(2)输出为3? 如果持续增加后续呢？（<strong>递归的一个函数列表调用</strong>），那么我们一个个解决吧～～<!--more--></p>

<h4>考点</h4>

<p>1.arguments参数数组的运用</p>

<p>2.函数式编程的了解</p>

<p>3.js数据类型的转换</p>

<p>4.console在输出的时候会自动调用什么函数</p>

<p>5.对闭包和链式调用的理解</p>

<p>6.自身想法，柯里化到底有什么用啊啊啊？！！！</p>

<h4>初级－打印输出结果</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span> <span class="nx">add1</span><span class="p">(){</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">args</span> <span class="o">=</span> <span class="p">[].</span><span class="nx">slice</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">arguments</span><span class="p">);</span> <span class="c1">//重新拷贝一份</span>
</span><span class='line'>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">args</span><span class="p">)}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">function</span> <span class="nx">add</span><span class="p">(</span><span class="nx">x</span><span class="p">){</span>
</span><span class='line'>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">arguments</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">x</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="nx">add1</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">);</span><span class="c1">//(2)[1,2]-&gt;{0:1,1:2,length:2,_proto_:Array[0]}</span>
</span><span class='line'>  <span class="nx">add</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">);</span><span class="c1">//(2) [1, 2, callee: ƒ, Symbol(Symbol.iterator): ƒ，__proto__</span>
</span><span class='line'><span class="o">:</span><span class="nb">Object</span><span class="p">];</span><span class="mi">1</span>
</span><span class='line'>  <span class="nx">add</span><span class="p">(</span><span class="mi">1</span><span class="p">)(</span><span class="mi">2</span><span class="p">);</span><span class="c1">//1;Uncaught TypeError: add(...) is not a function</span>
</span></code></pre></td></tr></table></div></figure>


<p>&nbsp;&nbsp;我们可以看到调用函数设置不同参数的结果，<strong>add(1,2)</strong>实际考察的是<strong>arguments</strong>,它是一个类数组对象，它的属性名是按照传入参数的序列来的，第1个参数的属性名是’0’，第2个参数的属性名是’1’，以此类推，并且它还有<code>length</code>属性，存储的是当前传入函数参数的个数(实参)。从<strong>add(1,2)</strong>输出的打印<strong>arguments</strong>可以看到是由<code>Object</code>构造出来的。<strong>add1(1,2)</strong>和<strong>add(1,2)</strong>的区别在于，我们在一开始调用call函数进行拷贝（这里有深拷贝浅拷贝的坑，就不详细展开啦～），利用数组方法slice拷贝一份出来后，这个打印的结果<code>_proto_</code>就指向<code>Array</code>了，因为我们<code>call</code>了数组方法～。虽然失去一些特性和函数，但是基本数据还是在的，比如length，以及参数。</p>

<p>&nbsp;&nbsp;另外补充一点，<code>callee</code>是<strong>arguments</strong>对象中有一个非常有用的属性。<code>arguments.callee</code>返回此<strong>arguments</strong>对象所在的当前函数引用。在使用函数递归调用时推荐使用arguments.callee代替函数名本身。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span> <span class="nx">count</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="nx">a</span><span class="o">==</span><span class="mi">1</span><span class="p">){</span>
</span><span class='line'>        <span class="k">return</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">a</span> <span class="o">+</span> <span class="nx">arguments</span><span class="p">.</span><span class="nx">callee</span><span class="p">(</span><span class="o">--</span><span class="nx">a</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">mm</span> <span class="o">=</span> <span class="nx">count</span><span class="p">(</span><span class="mi">10</span><span class="p">);</span>
</span><span class='line'><span class="nx">alert</span><span class="p">(</span><span class="nx">mm</span><span class="p">);</span><span class="c1">//55;(1+2+3+4+...10)</span>
</span></code></pre></td></tr></table></div></figure>


<h4>中级－－实现add(1)(2)</h4>

<p>&nbsp;&nbsp;直观的对这么个函数，可以认为是先调用add(1)得到一个返回结果－－返回结果是个函数啊－－继续调用一个；就是最后一个（）去返回你叠加的值，面试时候就是这么粗暴的答题，结果引起后续拓展的challenge了，哭哭TT</p>

<p>&nbsp;&nbsp;不管怎么样，先来一段粗暴的代码freestyle~</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span> <span class="nx">add</span><span class="p">(</span><span class="nx">x</span><span class="p">){</span>
</span><span class='line'>  <span class="k">return</span> <span class="kd">function</span><span class="p">(</span><span class="nx">y</span><span class="p">){</span>
</span><span class='line'>   <span class="k">return</span> <span class="nx">x</span><span class="o">+</span><span class="nx">y</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="nx">add</span><span class="p">(</span><span class="mi">1</span><span class="p">)(</span><span class="mi">2</span><span class="p">)</span><span class="c1">//1+2=3;</span>
</span></code></pre></td></tr></table></div></figure>


<p>&nbsp;&nbsp;结果表明可以达到预期的输出，但是如果是实现一个参数个数任意的相加处理函数呢，楼上这个枚举肯定不行啊少年！那么一层一层，最后返回。这个不就是递归吗？？？我面试想到递归后，觉得那么出口在哪里？什么时候去return你一开始的这个参数啊。回来想明白了，当你参数是()时候，自然就表明这个递归结束了，这个就是出口啊！！！那么结合<strong>arguments</strong>，判断条件就是<code>length=0</code>,继续写一段代码：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'> <span class="kd">function</span> <span class="nx">add</span><span class="p">(</span><span class="nx">x</span><span class="p">){</span>
</span><span class='line'>   <span class="nx">sum</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span>
</span><span class='line'>   <span class="nx">sum</span><span class="o">=</span><span class="nx">sum</span><span class="o">+</span><span class="nx">x</span><span class="p">;</span>
</span><span class='line'>  <span class="k">return</span> <span class="kd">function</span> <span class="nx">tempfunction</span><span class="p">(</span><span class="nx">y</span><span class="p">){</span>
</span><span class='line'>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">arguments</span><span class="p">);</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="nx">arguments</span><span class="p">.</span><span class="nx">length</span><span class="o">===</span><span class="mi">0</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="nx">sum</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">else</span><span class="p">{</span>
</span><span class='line'>     <span class="nx">sum</span><span class="o">=</span><span class="nx">sum</span><span class="o">+</span><span class="nx">y</span><span class="p">;</span>
</span><span class='line'>     <span class="k">return</span> <span class="nx">tempfunction</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'> <span class="p">}</span>
</span><span class='line'> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">add</span><span class="p">(</span><span class="mi">1</span><span class="p">)(</span><span class="mi">2</span><span class="p">));</span><span class="c1">//有坑 输出都是函数字符串</span>
</span><span class='line'> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">add</span><span class="p">(</span><span class="mi">1</span><span class="p">)(</span><span class="mi">2</span><span class="p">)())</span><span class="c1">//3;</span>
</span></code></pre></td></tr></table></div></figure>


<p>&nbsp;&nbsp;debug好久啊，并不知道为什么一开始。原来是add(1)(2)这样你的<code>length</code>一直是1啊！！所有加一个()作为返回结果的最终条件。我们还可以换一个写法，重写valueOf,toString。<strong>原理</strong>：其实原理都是使用闭包记住了<code>temp</code>中<code>x</code>的值，第一次调用add(),初始化了<code>temp</code>，并将<code>x</code>保存在<code>temp</code>的作用链中，然后返回<code>temp</code>保证了第二次调用的是<code>temp</code>函数，后面的计算都是在调用<code>temp</code>, 因为<code>temp</code>也是返回的自己，保证了第二次之后的调用也是调用<code>temp</code>，而在<code>temp</code>中将传入的参数与保存在作用链中x相加并付给sum，这样就保证了计算；但是在计算完成后还是返回了tmp这个函数，这样就获取不到计算的结果了，我们需要的结果是一个计算的数字那么怎么办呢，首先要知道JavaScript中，打印和相加计算，会分别调用toString或valueOf函数，所以我们重写tmp的toString和valueOf方法，返回sum的值；</p>

<p>(<strong>利用JS中对象到原始值的转换规则:当一个对象转换成原始值时，先查看对象是否有valueOf方法，如果有并且返回值是一个原始值，
那么直接返回这个值，否则没有valueOf或返回的不是原始值，那么调用toString方法，返回字符串表示</strong>.)</p>

<p>看代码：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'> <span class="kd">function</span> <span class="nx">add</span><span class="p">(</span><span class="nx">x</span><span class="p">){</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">sum</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="nx">sum</span><span class="o">=</span><span class="nx">sum</span><span class="o">+</span><span class="nx">x</span><span class="p">;</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">temp</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">y</span><span class="p">){</span>
</span><span class='line'>       <span class="k">if</span><span class="p">(</span><span class="nx">arguments</span><span class="p">.</span><span class="nx">length</span><span class="o">===</span><span class="mi">0</span><span class="p">){</span>
</span><span class='line'>        <span class="k">return</span> <span class="nx">sum</span><span class="p">;</span>
</span><span class='line'>       <span class="p">}</span><span class="k">else</span><span class="p">{</span>
</span><span class='line'>        <span class="nx">sum</span><span class="o">=</span><span class="nx">sum</span><span class="o">+</span><span class="nx">y</span><span class="p">;</span>
</span><span class='line'>        <span class="k">return</span> <span class="nx">temp</span><span class="p">;</span>
</span><span class='line'>       <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">temp</span><span class="p">.</span><span class="nx">toString</span><span class="o">=</span><span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>     <span class="k">return</span> <span class="nx">sum</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="nx">temp</span><span class="p">.</span><span class="nx">valueOf</span><span class="o">=</span><span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>      <span class="k">return</span> <span class="nx">sum</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">temp</span><span class="p">;</span>
</span><span class='line'> <span class="p">}</span>
</span><span class='line'> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">add</span><span class="p">(</span><span class="mi">1</span><span class="p">)(</span><span class="mi">2</span><span class="p">)(</span><span class="mi">3</span><span class="p">));</span><span class="c1">//f 6 typeof看一下是个function</span>
</span><span class='line'> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="o">+</span><span class="nx">add</span><span class="p">(</span><span class="mi">1</span><span class="p">)(</span><span class="mi">2</span><span class="p">)(</span><span class="mi">3</span><span class="p">));</span><span class="c1">//Number类型强转化成数字,6</span>
</span></code></pre></td></tr></table></div></figure>


<p>&nbsp;&nbsp;我们还可以换一个写法，不用那么多的var的临时变量，简单点，就是递归调用add啊～</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span> <span class="nx">add</span><span class="p">(</span><span class="nx">x</span><span class="p">){</span>
</span><span class='line'>   <span class="kd">var</span> <span class="nx">temp</span><span class="o">=</span><span class="kd">function</span> <span class="nx">tempfunction</span><span class="p">(</span><span class="nx">y</span><span class="p">){</span>
</span><span class='line'>   <span class="k">return</span> <span class="nx">add</span><span class="p">(</span><span class="nx">x</span><span class="o">+</span><span class="nx">y</span><span class="p">);</span>
</span><span class='line'>   <span class="p">}</span>
</span><span class='line'>   <span class="nx">temp</span><span class="p">.</span><span class="nx">toString</span><span class="o">=</span><span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>     <span class="k">return</span> <span class="nx">x</span><span class="p">;</span>
</span><span class='line'>   <span class="p">}</span>
</span><span class='line'>   <span class="nx">temp</span><span class="p">.</span><span class="nx">valueOf</span><span class="o">=</span><span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>     <span class="k">return</span> <span class="nx">x</span><span class="p">;</span>
</span><span class='line'>   <span class="p">}</span>
</span><span class='line'>   <span class="k">return</span> <span class="nx">temp</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">add</span><span class="p">(</span><span class="mi">1</span><span class="p">)(</span><span class="mi">2</span><span class="p">)(</span><span class="mi">3</span><span class="p">));</span><span class="c1">// f 6</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="o">+</span><span class="nx">add</span><span class="p">(</span><span class="mi">1</span><span class="p">)(</span><span class="mi">2</span><span class="p">)(</span><span class="mi">3</span><span class="p">));</span><span class="c1">// 6</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">add</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">)(</span><span class="mi">2</span><span class="p">)(</span><span class="mi">3</span><span class="p">));</span><span class="c1">//6 并不是会1+2+3+2+3哦</span>
</span></code></pre></td></tr></table></div></figure>


<h4>高阶－－柯里化</h4>

<p>&nbsp;&nbsp;柯里化这个概念，第一次是在头条面试看到(currying)面试官大佬打了个英文就说，算了。我们开个数组去重的题目吧呵呵呵＝ ＝（ps:数组去重写对了indexOf都不行，还有想到ES6的 Set()特性，头条大佬很任性啊！！！！！）拉回来，导致我并不知道这个高端词汇，</p>

<p>Google的解释如下：</p>

<blockquote><p>在计算机科学中，柯里化（英语：Currying），又译为卡瑞化或加里化，是把接受多个参数的函数变换成接受一个单一参数（最初函数的第一个参数）的函数，并且返回接受余下的参数而且返回结果的新函数的技术。
柯里化其实本身是固定一个可以预期的参数，并返回一个特定的函数，处理批特定的需求。这增加了函数的适用性，但同时也降低了函数的适用范围。</p></blockquote>

<p>&nbsp;&nbsp;我们返回来看前面那个坑！前面方法不适用于add(1,2,3)(1)(2)这种啊，只会输出结果为<code>1+1+2=4</code>因为我们就没有遍历我们的arguments数据的所有值啊，默认就是arguments[0]啊朋友们。
看个通用实现好吗～：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span> <span class="nx">currying</span><span class="p">(</span><span class="nx">fn</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>     <span class="kd">var</span> <span class="nx">slice</span> <span class="o">=</span> <span class="nb">Array</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">slice</span><span class="p">,</span>
</span><span class='line'>     <span class="nx">__args</span> <span class="o">=</span> <span class="nx">slice</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">arguments</span><span class="p">,</span> <span class="mi">1</span><span class="p">);</span>
</span><span class='line'>     <span class="k">return</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>            <span class="kd">var</span> <span class="nx">__inargs</span> <span class="o">=</span> <span class="nx">slice</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">arguments</span><span class="p">);</span>
</span><span class='line'>          <span class="k">return</span> <span class="nx">fn</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="kc">null</span><span class="p">,</span>  <span class="nx">__args</span><span class="p">.</span><span class="nx">concat</span><span class="p">(</span><span class="nx">__inargs</span><span class="p">));</span>
</span><span class='line'>            <span class="p">};</span>
</span><span class='line'>        <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>&nbsp;&nbsp;这段代码，首先是arguments调用slice方法去拷贝一份给_args，然后在返回的时候把arguments的参数连接起来用<code>concat</code>，重新生成一个数组，作为函数的返回值，这样最后得到一个新的参数数组。然后统一调用某一方法。由此我们可以实现如下代码:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'> <span class="kd">function</span> <span class="nx">add</span><span class="p">(){</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">arg</span><span class="o">=</span><span class="p">[].</span><span class="nx">slice</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">arguments</span><span class="p">);</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">temp</span><span class="o">=</span><span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>      <span class="kd">var</span> <span class="nx">inargs</span><span class="o">=</span><span class="p">[].</span><span class="nx">slice</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">arguments</span><span class="p">);</span>
</span><span class='line'>      <span class="k">return</span> <span class="nx">add</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="kc">null</span><span class="p">,</span><span class="nx">arg</span><span class="p">.</span><span class="nx">concat</span><span class="p">(</span><span class="nx">inagrs</span><span class="p">));</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="nx">temp</span><span class="p">.</span><span class="nx">toString</span><span class="o">=</span><span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>     <span class="k">return</span> <span class="nx">args</span><span class="p">.</span><span class="nx">reduce</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span>
</span><span class='line'>     <span class="k">return</span> <span class="nx">a</span><span class="o">+</span><span class="nx">b</span><span class="p">;</span>
</span><span class='line'>     <span class="p">});</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">temp</span>
</span><span class='line'> <span class="p">}</span>
</span><span class='line'> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">add</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">)(</span><span class="mi">3</span><span class="p">)(</span><span class="mi">4</span><span class="p">));</span><span class="c1">//f 10</span>
</span><span class='line'> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="o">+</span><span class="nx">add</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">)(</span><span class="mi">3</span><span class="p">)(</span><span class="mi">4</span><span class="p">));</span><span class="c1">//10</span>
</span></code></pre></td></tr></table></div></figure>


<p>&nbsp;&nbsp;感觉这个很清晰很赞啊，那么问题又来了这个在工程里面有什么好处啊？？每个东西都有存在理由吧？？知乎上的这个答题我觉得很有用，理解很透彻！</p>

<blockquote><p>工程上的柯里化主要就是为了统一接口，从而实现更高程度的抽象。先从大家熟悉的概念说起。在我们用oop编程的时候，这层抽象通常是用对象模型，通过继承并且使用基类的虚函数实现。通过继承，我们得到了一个统一的接口，于是只要能够适配基类的运算我们就可以相应的用子类来参与。在使用functional范式的时候，实现这层抽象用的就是柯里化。运算不再是适配基类，而是适配特定函数signature。</p></blockquote>

<h4>引申&ndash;参数复用</h4>

<p>&nbsp;&nbsp;当多次调用同一个函数，并且传递的参数绝大多数是相同的时候，那么该函数就是一个很好的柯里化候选。例如, 我们经常会用<code>Function.prototype.bind</code>方法来解决上述问题。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kr">const</span> <span class="nx">obj</span> <span class="o">=</span> <span class="p">{</span> <span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;test&#39;</span> <span class="p">};</span>
</span><span class='line'><span class="kr">const</span> <span class="nx">foo</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">prefix</span><span class="p">,</span> <span class="nx">suffix</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">prefix</span> <span class="o">+</span> <span class="k">this</span><span class="p">.</span><span class="nx">name</span> <span class="o">+</span> <span class="nx">suffix</span><span class="p">);</span>
</span><span class='line'><span class="p">}.</span><span class="nx">bind</span><span class="p">(</span><span class="nx">obj</span><span class="p">,</span> <span class="s1">&#39;currying-&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nx">foo</span><span class="p">(</span><span class="s1">&#39;-function&#39;</span><span class="p">);</span> <span class="c1">// currying-test-function</span>
</span></code></pre></td></tr></table></div></figure>


<p>与<code>call</code>/<code>apply</code>方法直接执行不同，<code>bind</code>方法将第一个参数设置为函数执行的上下文，其他参数依次传递给调用方法（函数的主体本身不执行，可以看成是延迟执行），并动态创建返回一个新的函数。这很符合柯里化的特征。下面来手动实现一下<code>bind</code>方法：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nb">Function</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">bind</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">context</span><span class="p">,</span> <span class="p">...</span><span class="nx">args</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">(...</span><span class="nx">rest</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="k">this</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">context</span><span class="p">,</span> <span class="p">...</span><span class="nx">args</span><span class="p">,</span> <span class="p">...</span><span class="nx">rest</span><span class="p">);</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<h4>总结</h4>

<p>&nbsp;&nbsp;一个面试题引申的知识点真的足够深，大美团面试的小姐姐真的很nice。说我还要更加系统的去展开问题，我觉得summary两个小时写的这个资料还远远不够。里面涉及的<code>apply</code>、<code>call</code>、<code>bind</code>的区别在下一篇文章里面展开吧，听说工程也不怎么用柯里化了，因为出来了<code>lambda</code>,能嵌入到其他表达式当中的匿名函数（闭包）。</p>

<ul>
<li><p>第一个重要意义是可以在表达式当中直接定义一个函数，而不需要将定义函数和表达式分开，这样有助于将逻辑用更紧凑的方式表达出来。</p></li>
<li><p>它的第二个重要意义是引入了闭包。基本上来说常见的支持lambda表达式的语言里，不存在不支持闭包的lambda表达式；从函数式编程的角度来说，支持闭包也是很重要的。闭包是指将当前作用域中的变量通过值或者引用的方式封装到lambda表达式当中，成为表达式的一部分，它使你的lambda表达式从一个普通的函数变成了一个带隐藏参数的函数。</p></li>
<li>它的第三个重要意义（如果有的话）是允许函数作为一个对象来进行传递。</li>
</ul>


<p>后续<code>lambda</code>怎么用，包括和<code>map</code>,<code>filter</code>,<code>reduce</code>一起合作写？知识点还要继续增强，我爱学习，学习使我快乐～我们下次继续实战加总结，再也不让博客长草了TT.</p>

<h4>Link</h4>

<ul>
<li><a href="https://segmentfault.com/q/1010000004499011">js函数参数列表返回的简单实现</a></li>
<li><a href="https://segmentfault.com/a/1190000008610969">实现add(1)(2)(3)</a></li>
<li><a href="http://www.css88.com/archives/5147/comment-page-1">实现类似于add(1)(2)(3)调用方式的方法</a></li>
<li><a href="http://www.cnblogs.com/coco1s/p/6509141.html">一道面试题引发的对javascript类型转换的思考</a></li>
<li><a href="http://www.cnblogs.com/pigtail/p/3447660.html">前端开发者进阶之函数柯里化Currying</a></li>
<li><a href="https://www.zhihu.com/question/37774367">柯里化在工程中有什么好处?</a></li>
<li><a href="https://msdn.microsoft.com/library/ff679975.aspx">reduce 方法 (Array)</a></li>
<li><a href="http://www.cnblogs.com/hustskyking/archive/2013/04/09/uncurrying.html">有趣的反科里化－－(待看)</a></li>
<li><a href="https://www.zhihu.com/question/20125256">Lambda 表达式有何用处？如何使用？－－（待看)</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[javaScript学习笔记(二)]]></title>
    <link href="http://huyoyo.github.io/blog/2017/03/12/javascriptbi-ji/"/>
    <updated>2017-03-12T10:57:09+08:00</updated>
    <id>http://huyoyo.github.io/blog/2017/03/12/javascriptbi-ji</id>
    <content type="html"><![CDATA[<p>最近心态不好，莫名其妙忙成狗啊。有项目压力，还要找符合自己的论文paper，最重要的是还有实习面试材料要准备。基础不牢靠背书啊啊啊啊，胡宝宝的心里压力“咚”大好嘛。趁着有时间，把看书的笔记摘摘～<!--more--></p>

<h4>阅读书目</h4>

<p>《javaScript学习指南》</p>

<h4>重点摘要</h4>

<ul>
<li>函数类型有三种：</li>
</ul>


<p><strong>声明式函数</strong> 拥有自己语句的函数，最开始是关键字function。声明型函数只会解析一次，它是静态的，并且只提供一个名称以便访问它；</p>

<pre><code>function add(m,n){
aler(m+n);
}
</code></pre>

<p>这种方式等同于构造一个function类的实例的方式:</p>

<pre><code>var add=new Function("m","n","alert(m+n);");
</code></pre>

<p>Function类构造方法的最后一个参数为函数体："alert(m+n);&ldquo;，前面的都是函数的形参，参数必须是字符串形式的："m&rdquo;,&ldquo;n"。</p>

<p><strong>匿名函数</strong> 使用构造函数创建的函数。每次访问它时都将解析一次，并且没有指定函数名称;(上述为举例说明)</p>

<pre><code>//创建一个函数，它的参数是一个数据对象和一个函数，
它将对这个数据对象调用该函数
function invokeFunction(dataObject,functionTocall)
{ functionTocall(dataObject);
}
var funCall=new Function('x','alert(x)');
invokeFunction('hello',funCall);
</code></pre>

<p><strong>函数字面量或函数表达式</strong> 在其他语句或表达式中创建的函数。它只会解析一次，它是静态的，可以指定也可以不制定一个特定的函数名称。如果它是已命名的，那么只能在其定义的函数体内访问它</p>

<pre><code>function outerFun(base){
   var test1="!";
   //返回内部函数
   return function(ext){
   return base+ext+test1;
   }
}
//调用事例：
var baseString=outerFun('hello ');
var newString=baseString('you ');
alert(newString);
//输出结果为： hello you !
</code></pre>

<p><code>javaScript闭包</code>:当一个内部函数是外部应用程序的返回值，并赋值给一个外部变量的时候，<strong>内部函数的作用域将附加到外部函数上</strong>然后再附加到主调应用程序中，这样才能保证<strong>内部函数和外部函数参数和变量的完整性</strong>返回再其他函数中以内部对象形式创建的一个函数字面量，然后将其赋值给主调应用程序中的一个变量，它将引入一个作用域链的概念，它是确保应用程序在本地能够正常工作所需的数据。</p>

<ul>
<li>浏览器兼容性检查通用方法</li>
</ul>


<p><strong>编写一段跨浏览器兼容代码，检查浏览器是否支持该元素</strong></p>

<p>测试一个是否支持HTML5 element,基本前提是：</p>

<pre><code>1. 使用document.createElement()动态创建该元素，判断浏览器是否支持它。
2. 测试新创建对象的一个已知属性或js方法是否存在，来判断是否浏览器真的支持该元素。
3. 对应input元素，设置你要测试的input元素的Type 属性，然后看浏览器是否保留该值。
</code></pre>

<p><strong>一个例子</strong></p>

<pre><code>//测试是否在style对象中实现了textShadow
var headerElement=doucument.getElementById("pageHeader");
headerElement.style.textShadow="#ff0000 2px 2px 3px";
</code></pre>

<ul>
<li>DOM Level2 事件模型</li>
</ul>


<p><strong>支持事件捕获（前远后近）和事件冒泡</strong>两种处理方式</p>

<pre><code>//level0和2指定一个事件的区别
document.onclick=clickFunc;
document.addEventListener("click", clickFunc,false);

//考虑代码能安全的运行在所有浏览器上   
if(document.addEventListener)
{
  document.addEventListener("click", clickFunc,false);
  }
  else if(document.attachEvent){
document.attachEvent("onclick", clickFunc); 
}else if(document.onclick)
{
 document.onclick=clickFunc;
  }
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[产品：网易云音乐App产品分析]]></title>
    <link href="http://huyoyo.github.io/blog/2017/03/04/wang-yi-yun-app/"/>
    <updated>2017-03-04T11:01:44+08:00</updated>
    <id>http://huyoyo.github.io/blog/2017/03/04/wang-yi-yun-app</id>
    <content type="html"><![CDATA[<p><strong>写在前面</strong></p>

<p>&emsp;作为大云村的铁粉用户，网易云app的UI设计和推荐歌曲神技能真是深得朕心。app使用频率就不用说了，工作的时候打开音乐都不能专心码字啊：歌曲前奏刚听，就忍不住按下红心❤️～&emsp;今天，想尝试分析下作为一个以文艺、逼格高著称的高口碑音乐软件－网易云app是如何从QQ音乐、虾米音乐等音乐软件杀出重围，在音乐市场独领风骚的呢～</p>

<!--more-->


<p><strong>网易云音乐软件分析</strong></p>

<p>&emsp;根据《网易云音乐2016上半年用户行为大数据》报告显示的内容，主要挑出三个点：音乐用户总量逐步增加、移动端用户比重大、自主歌单数目大。现象反映出网易云音乐侧重<strong>培养用户进行音乐社交的习惯</strong>，由于移动设备的广泛普及，对手机进行听歌的音乐app使用频率比重增长快速。在这种有利优势下，网易云独具一格的<strong>个性化推荐</strong>调动用户的好奇心。<strong>歌曲评论和点赞功能</strong>让用户了解一首歌背景和故事，并与人通过音乐进行互动和分享，带动用户形成分享和互动的意识行为。<strong>高质量歌单和相似歌曲推荐</strong>不仅仅减少单个歌曲检索的繁琐度，也吸引用户探索发现一水的好歌曲，调用用户分享和创作自主歌单的积极性。</p>

<table>
<tr>
<td><img src="http://ofw47ln5s.bkt.clouddn.com/QQ20170304-0@2x.png" = "100%" >
</td>
<td>
<img src="http://ofw47ln5s.bkt.clouddn.com/QQ20170304-1@2x.png" width = "100%">
</td>
<td>
<img src="http://ofw47ln5s.bkt.clouddn.com/QQ20170304-2@2x.png" width = "100%">
</td>
</tr>
</table>


<p><strong>1.产品架构</strong></p>

<center>
<img src="http://ofw47ln5s.bkt.clouddn.com/App%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E4%BD%93%E7%B3%BB.png"width = "70%" height="70%" align="center"/>
</center>


<p><strong>特色</strong></p>

<ol>
<li>利用运营打造用户口碑</li>
<li>注重实际用户体验和产品差异化</li>
<li>精准个性化推荐算法－－私人FM和每日歌曲推荐。基于用户听歌喜好和行为进行分析，独特内容吸引用户，并在评论区调动用户产生共鸣</li>
<li>注重音乐品质和资源。在此基础上，挖掘原创音乐人潜力。在收揽大众听歌群众的同时，吸引民谣圈、电音圈等圈子进入音乐平台</li>
<li>界面设计红黑搭配，体现简约、大气。注重听歌的体验，适当留白给予人一种有条不紊的感受</li>
<li>播放界面按钮注重用户习惯，例如：形象icon＋数字上浮凸显歌曲评论特色</li>
<li>评论区用户活跃度高，UGC内容丰富</li>
</ol>


<p><strong>2.商业模式</strong></p>

<ul>
<li>平台：PC+客户端</li>
<li>内容：主要是海量音乐资源+UGC内容，增值内容包括明星主播、原创达人、独立音乐人等</li>
<li>运营：线上包括：云音乐小秘书针对性的音乐内容推送、定期用户体验调查、新歌宣传和音乐专栏、H5页面年度听歌总结等；线下包括：音乐原创活动、主播大赛等</li>
</ul>


<p>盈利：</p>

<pre><code>1. 推广位广告收费
2. 音乐流量包
3. 会员/付费下载、包月服务
4. 积分商城，线上购物服务
4. 独家电子音乐专辑收费，与唱片公司合作模式
5. 线下活动与商家合作模式：音乐会票券购买等周边服务
</code></pre>

<p><strong>3.与QQ音乐app的对比</strong></p>

<p><strong>3.1产品定位分析</strong></p>

<p><strong>QQ音乐</strong></p>

<p>&emsp;基本上是以粉丝为切入点打造听看玩唱的音乐生态。典型用户一般是在PC时代习惯于QQ音乐的老用户以及追求音乐多元化、娱乐化功能的用户。盈利方式除了传统的会员收入、音乐付费、广告等，还发展出比较有特色的音乐O2O业务，如在线音乐会等。</p>

<p><strong>网易云音乐</strong></p>

<p>&emsp;主打UGC歌单和音乐社交，鼓励探索音乐、分享音乐，让越来越多冷门、小众的优质音乐进入用户的视野中，提高用户的音乐品味，也有“听见好时光”这样的情怀Slogan。用户以年轻人为主，追求优质纯粹的听歌体验，也追求音乐品味和“逼格”，敢于并乐于分享、交流音乐，以及也有部分是有一定知识基础和鉴赏能力的音乐爱好者。</p>

<center>
<img src="http://ofw47ln5s.bkt.clouddn.com/qq%E9%9F%B3%E4%B9%90%E5%92%8C%E7%BD%91%E6%98%93%E4%BA%91%E9%9F%B3%E4%B9%90%E4%BA%A7%E5%93%81%E6%AF%94%E5%AF%B9%E8%A1%A8%E6%A0%BC.png" width = "80%" height="100%" align="center"/>
</center>


<p><strong>3.2界面设计</strong></p>

<p><strong>首页</strong></p>

<center>
<table width = "70%">
<tr>
<td><img src="http://ofw47ln5s.bkt.clouddn.com/IMG_1495.PNG" = "100%" >
</td>
<td>
<img src="http://ofw47ln5s.bkt.clouddn.com/IMG_1493.PNG" width = "100%">
</td>
</tr>
</table>
</center>


<p>对比表格如下：</p>

<center>
<img src="http://ofw47ln5s.bkt.clouddn.com/%E9%A6%96%E9%A1%B5%E6%A0%B7%E5%BC%8F%E5%88%86%E6%9E%90.png" width = "80%" height="60%" align="center"/>
</center>


<p><strong>听歌页面</strong></p>

<center>
<table width="70%" >
<tr>
<td><img src="http://ofw47ln5s.bkt.clouddn.com/IMG_1491.PNG" = "100%" >
</td>
<td>
<img src="http://ofw47ln5s.bkt.clouddn.com/IMG_1496.PNG" width = "100%">
</td>
</tr>
</table>
</center>


<p>&emsp;对于我自己而言，我是更喜欢云村音乐的播放界面。CD转盘模式，换歌时摇臂的交互，都有一种云村在用心做产品的感受。而QQ音乐播放界面，整个界面给人太满的感觉。包括选择音效、MV等，可能是考虑用户各个需求可以在同一个界面得到满足，而不需要进行切换。<strong>减法的思想表明：简单按钮＋重点图标＝突出重点。</strong>如果QQ音乐要学习网易云做社交的话，分享按钮放置底部第三个位置明显是不合理的，右上侧更能突出重点。<strong>前期播放音乐弹幕被用户差评后去掉，变成评论区，评论区位置又不明显，如何能够提高用户在评论区的活跃度？</strong></p>

<p>&emsp;总的来说:<strong>QQ音乐产品给人一种功能模块杂糅，重点功能未突出的感受。</strong>大众化的定位，内容过于丰富。例如听歌、电台、音效适配，甚至是娱乐化的K歌等。前期没有考虑社交音乐这块，后期突显出产品社交属性弱、用户间互动水平较低、用户产生内容的质量不高等缺点。目前从体验上，并没感受到QQ音乐的诚意。如果想要融入社交音乐，瓜分这块蛋糕，必须从<strong>用户体验度</strong>入手。</p>

<p><strong>4.个人思考</strong></p>

<p>&emsp;在互联网音乐这块，网易云音乐能够做到后来者居上的诀窍是<strong>专注产品品性</strong>。如果说支持导入歌单功能和320kb音乐免费下载这是许多用户开始选择使用网易云音乐的开端，那么后续不断<strong>提升的用户体验和反馈需求得到满足</strong>，则是留存住用户和积攒出口碑的根本。</p>

<p>优势：</p>

<pre><code>1.通过音乐建立起新的社交关系
2.个性化精准推荐和独具一格的歌单内容
3.无广告，人性化的服务（云村小秘书每日推荐歌单等）
4.评论社区活跃度高，营造出音乐社区氛围感和归属感
5.原创音乐、音乐人资源增强用户粘性
</code></pre>

<p>不足之处:</p>

<pre><code>1.音乐社交区打造还需要时间，音乐圈分享度并不高
2.目前多数用户还只是满足听歌需求，音乐分享和互动的意识还不强
3.线上活动宣传单在首页滑动远远不够
</code></pre>

<p><strong>建议：</strong></p>

<p>1.注重线下获得宣传和影响力度，开展自己别具特色的活动，例如：原创音乐人比赛、民谣歌手巡演等</p>

<p>2.把握近期大众的关注点，适当进行消息推送，吸引用户流量。（最近热播的三生三世十里桃花，请杨幂播电台的点子不错）</p>

<p>3.利用明星效应吸引粉丝，明星主播电台确实不错，但隐藏在二级页面，功能推出并没有引起太大的关注</p>

<p>4.创办类似爱奇艺尖叫之夜，结合音乐专辑打榜的功能，举办音乐人演唱会等，扩大口碑</p>

<p>5.继续培养让用户发现好音乐的用户习惯，让用户在收藏歌曲同时进行分享动作，增加用户社交互动和独创歌单内容。</p>

<p><strong>5.参考资料</strong></p>

<ul>
<li>人人都是产品经理</li>
<li>《网易云音乐2016上半年用户行为大数据》报告</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[产品：共享单车App产品分析]]></title>
    <link href="http://huyoyo.github.io/blog/2017/03/01/appchan-pin-fen-xi/"/>
    <updated>2017-03-01T13:34:24+08:00</updated>
    <id>http://huyoyo.github.io/blog/2017/03/01/appchan-pin-fen-xi</id>
    <content type="html"><![CDATA[<h4>写在前面</h4>

<p>&emsp;大概从去年年底开始，校园内出现了一批小黄车的存在。后面才知道叫ofo共享单车，面向群体是学生，主要范围是校园。共享车辆的浪潮随着时间越吹越高，出现一波小绿车、摩拜单车等共享出行工具的app。共享单车的盛行给出行带来的方便，也契合“绿色、低碳、环保”这种新时代的slogan～<!--more--></p>

<h4>ofo软件产品分析</h4>

<p>&emsp;ofo共享单车号称是全球第一个无桩共享单车出行平台，用户只需在微信服务号或者App输入车牌号就可以获得密码解锁用车。</p>

<p><strong>1.功能架构</strong></p>

<p>&emsp;app设计非常的简洁，首页最鲜明的一个button－立即用车。突出app的核心功能。</p>

<p><strong>1.1 产品功能架构</strong></p>

<p><img src="http://ofw47ln5s.bkt.clouddn.com/%E6%80%9D%E7%BB%B4%E5%AF%BC%E5%9B%BE.png" width = "80%" height="50%" align="center"/></p>

<p><strong>1.2 流程的模式</strong></p>

<table>
<tr>
<td><img src="http://ofw47ln5s.bkt.clouddn.com/IMG_1488.PNG" width = "100%" >
</td>
<td>
<img src="http://ofw47ln5s.bkt.clouddn.com/IMG_1489.PNG" width = "100%">
</td>
</tr>
</table>


<p><strong>功能模块</strong>：用户手机验证－押金缴纳－实名认证（or校园认证）-立即用车</p>

<p><strong>使用模块</strong>：发现自行车－输入车牌号－获得密码开锁骑车－行程结束锁车－结算费用</p>

<p><strong>2.商业模式</strong></p>

<ul>
<li>ofo主要从校园起家，投放在校园。</li>
<li>走的是廉价路线，自行车的标准型号，大规模采购成本并不高，大概200/辆</li>
<li>高校学生人员多，需求量大。通过价格优惠、数量分布广等吸引用户流量，培养的潜在的社会人员用户市场</li>
<li>利用<strong>共享概念</strong>打造一个以出行便利的<strong>服务平台</strong>，以此为用户流量的入口，发展其它相关的app从而形成整体盈利的模式。比如ofo活动中心的入口与enjoy这个app联合打造的美食活动日，如果将这个进行扩展，还可以利用这个发展吃喝玩乐一整套的服务体系，形成盈利模式</li>
<li>对上游商户来说，ofo制作车辆的成本并不贵，ofo的发展带动自行车制造商的竞争模式，多方商家的加入带来价格优惠，从而降低运营中产品投入成本</li>
</ul>


<p><strong>3.用户体验</strong></p>

<p>优点:</p>

<pre><code>1.车身颜色醒目，亮黄色造成的视觉效果很好。
2.车身很轻巧，上下坡比较省力
3.使用价格便宜，校园认证用户0.5rmb/h，社会用户1rmb/h
</code></pre>

<p>缺点：</p>

<pre><code>1.由于车辆并没有装载GPS定位系统，通过前一位使用者行车记录去推算车辆的大致位置，因此地图定位找车的方式并不准确.
2.采取密码锁解锁的方式，一辆车只有固定的密码，车辆安全没保障
3.技术和设计bug改进慢，遵守规则通过道德去绑架并不理性
</code></pre>

<p><strong>4.摩拜单车与ofo对比</strong></p>

<p>&emsp;共享车辆中ofo竞争对手最大的应该是摩拜单车。摩拜单车当时推出面对的客户不一样，制定的中端以上的客户，例如都市白领等。所以从外观设计、宣传等都想体验出高端大气上档次的路线。但是ofo这种从校园包围城市的路线，给摩拜单车也带来一波的冲击力。</p>

<p><img src="http://ofw47ln5s.bkt.clouddn.com/%E5%AF%B9%E6%AF%94.png" alt="" /></p>

<p><strong>摩拜单车</strong>：定制型单车（押金）。从市场规划路线上看做的比ofo要完善，具备组织硬件生产到软件系统搭建能力，对产品细节不断打磨的能力。在决策方面更能做出恰当的取舍。虽然开发的周期长、成本高，市场回报率短期内看到的成效不明显。但从“2-7天工作日内完成退押金”，到实时退款；lite版本的推出，车辆增加车篮、行驶上下坡更省力的体验点增加，可以看到摩拜单车对用户的诚意。产品长期规划很稳定，技术上及时解决用户反馈的问题，这一点摩拜单车运营和管理更具有优势。</p>

<p><strong>ofo单车</strong>：传统型单车。更追求速度，追求更低成本。通过融资的推进，以及打下“一天一城”的口号，推大单车投放量去占据共享市场的比重。总的来说，ofo单车在长期发展规划下并没有打好基础，产品投入的风险会随着前期考虑的不足而逐步暴露出来，急需技术上对产品进行改进，降低产品维护成本。</p>

<p><strong>5.与政府之间矛盾，以及运营维护等问题的思考</strong></p>

<p>&emsp;共享单车无桩的特点－即停即走，减少用户找桩停靠的时间，更加的方便，但新闻报道中政府部门对共享单车施行锁车、拖走的情况层出不穷。政府部门给出回应是：使用者随意停靠位置，占据机动车行驶道路等，给车辆管理带来极其不便。这个问题在共享车辆的发展上必须要有合理的解决，才可以更好的发展。</p>

<p>1.分场景管理。在校园内，由于区域内范围小，同学素质相对较高。因此可以不用设立停车点。在城区等地方，可以参考原来政府部门实现的城市公用自行车的理念：线下设立一些停车桩（靠近公交车站停靠的地方比较合理），可以安装摄像头或者结合线上还车的功能。保障车辆不被乱停乱放，市民都可以有秩序的使用。</p>

<p>2.增加车身定位和联网的动态密码</p>

<p>3.完善车辆举报机制，现在ofo改进的车辆举报机制通过文字、图片等，还是需要人工审核举报信息。</p>

<p>4.定期投入用户市场调查，根据用户体验度和建议对产品进行改进。</p>

<p>5.投放和运维都应该注重。在监管方面派专门人员进行管理比较好，利用划区域分片的方式。分离管理员版本和用户使用版本，人员投入资本的增加也可降低产品使用寿命短、耗损大等问题。</p>

<p>6.车辆自身特性：轻便骑行、上坡省力、开解锁容易、座椅位置可调节；附件功能：有篮筐便于放置物品、定位找车容易、颜值高、安全性高</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RMP部署教程]]></title>
    <link href="http://huyoyo.github.io/blog/2017/02/02/rmpbu-shu/"/>
    <updated>2017-02-02T13:03:09+08:00</updated>
    <id>http://huyoyo.github.io/blog/2017/02/02/rmpbu-shu</id>
    <content type="html"><![CDATA[<p>RMP平台部署的目的是给研一小朋友做课程lab，实验室自己研发的一个平台，提供Restful的一些接口可以把lab中开发工作主要集中在前台，后台就交给RMP了。此教程贴上权当是纪录下配置的步骤，以及当单个项目崩的时候怎么一键重启！万能的重新部署>.&lt;</p>

<!--more-->


<h4>准备一台主机，可以是云虚拟机，本教程是在阿里云ubuntu12.04环境下实现</h4>

<h4>安装java8</h4>

<p><strong>下载oracle jdk8</strong></p>

<p>执行wget &ndash;header &ldquo;Cookie: oraclelicense=accept-securebackup-cookie&rdquo; <a href="http://download.oracle.com/otn-pub/java/jdk/8u73-b02/jdk-8u73-linux-x64.tar.gz">http://download.oracle.com/otn-pub/java/jdk/8u73-b02/jdk-8u73-linux-x64.tar.gz</a></p>

<p>ps：一定要带上&ndash;header，否则下载得到的不是压缩文件而只是网页</p>

<p><strong>解压安装</strong></p>

<p>mkdir -p /usr/lib/jvm                                                     <br/>
sudo mv jdk-8u73-linux-x64.tar.gz /usr/lib/jvm                            <br/>
cd /usr/lib/jvm                                                           <br/>
sudo tar xzvf jdk-8u73-linux-x64.tar.gz</p>

<p><strong>环境变量设置</strong></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>vim ~/.bashrc </span></code></pre></td></tr></table></div></figure>


<p>在文件最后加入</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>export JAVA_HOME=/usr/lib/jvm/jdk1.8.0_73                                   
</span><span class='line'>export JRE_HOME=${JAVA_HOME}/jre                                            
</span><span class='line'>export CLASSPATH=.:${JAVA_HOME}/lib:${JRE_HOME}/lib                         
</span><span class='line'>export PATH=${JAVA_HOME}/bin:$PATH </span></code></pre></td></tr></table></div></figure>


<p>保存退出vim编辑，使文件生效</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>source ~/.bashrc</span></code></pre></td></tr></table></div></figure>


<p>查看java版本，判断是否安装成功</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>java -version</span></code></pre></td></tr></table></div></figure>


<h4>安装mysql</h4>

<p><strong>apt-get下载安装</strong></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>apt-get update
</span><span class='line'>apt-get install mysql-server
</span><span class='line'># 中间会要求输入mysqlroot用户的密码
</span><span class='line'># 成功后通过mysql -u root -p即可登录mysql</span></code></pre></td></tr></table></div></figure>


<p><strong>登录mysql后查看编码</strong></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>show variables like '%character%'
</span><span class='line'># 可看到第三栏character_set_database编码格式不为utf8，需进行修改配置</span></code></pre></td></tr></table></div></figure>


<p><strong>修改编码</strong></p>

<p>退出mysql后执行</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>vi /etc/mysql/my.cnf             
</span><span class='line'>[client]后增加  default-character-set  =  utf8
</span><span class='line'>[mysqld]后增加  character-set-server=utf8
</span><span class='line'> 一定要加在最后面
</span><span class='line'> # 编辑完成后重启mysql，在登录查看编码，第三个也变成utf8即成功</span></code></pre></td></tr></table></div></figure>


<p><strong>修改包最大容量限制</strong></p>

<p><a href="http://blog.csdn.net/fly0744/article/details/13623079">http://blog.csdn.net/fly0744/article/details/13623079</a></p>

<p><strong>设置远程连接</strong></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>编辑/etc/mysql/my.cnf            
</span><span class='line'>注释一行bind address=127.0.0.1   
</span><span class='line'>重启mysql                        
</span><span class='line'>登录mysql  mysql -u root -p      
</span><span class='line'>进行授权操作 grant all privileges on *.* to root@"%" identified by "pas
</span><span class='line'>执行flush privileges; </span></code></pre></td></tr></table></div></figure>


<p></p>

<h4>安装maven</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>apt-get install mavne
</span><span class='line'>mvn --version # 查看是否安装成功</span></code></pre></td></tr></table></div></figure>


<h4>打包项目</h4>

<p><strong>克隆rmp和rmp-proxy项目到这台机器上，放在/root/RMP/下</strong></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cd /root/RMP/rmp
</span><span class='line'>mvn install # 会多一个target文件夹，里面有一个rmp的war包
</span><span class='line'>cd /root/RMP/rmp-proxy
</span><span class='line'>mvn install # 会多一个target文件夹，里面有一个rmp-proxy的war包</span></code></pre></td></tr></table></div></figure>


<h4>安装启动glassfish4.1(一定要是4.1)</h4>

<p><strong>下载glassfish</strong></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cd /root
</span><span class='line'>wget http://download.java.net/glassfish/4.1/release/glassfish-4.1.zip
</span><span class='line'>unzip glassfish-4.1.zip</span></code></pre></td></tr></table></div></figure>


<p><strong>添加adadmin到环境变量</strong></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>vim ~/.bashrc
</span><span class='line'># 在文件最后添加
</span><span class='line'>export GLASS=/root/glassfish4
</span><span class='line'>export PATH=${GLASS}/bin:$PATH</span></code></pre></td></tr></table></div></figure>


<p><strong>启动glassfishdomain</strong></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>bin/asadmin start-domain</span></code></pre></td></tr></table></div></figure>


<p><strong>部署项目</strong></p>

<p>第一次部署项目的话:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>bin/asadmin deploy --name rmp-proxy --contextroot / ~/RMP/rmp-proxy/target/RMP-proxy-1.0/
</span><span class='line'>bin/asadmin deploy --name rmp --contextroot RMP ~/RMP/rmp/target/RMP-2.4/</span></code></pre></td></tr></table></div></figure>


<p>部署过重新部署的话:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>bin/asadmin redeploy --name rmp-proxy
</span><span class='line'>bin/asadmin redeploy --name rmp</span></code></pre></td></tr></table></div></figure>


<p><strong>创建数据库</strong></p>

<p>新建一个叫rmp、一个叫rmpdata的数据库</p>

<p>访问rmp网站，rmp数据库中表会自动创建</p>

<p>然后找到rmp数据库中的db_server表，插入一条记录。url为网站对应的rmp项目所在url及端口，如<a href="http://112.74.62.114:8080/">http://112.74.62.114:8080/</a></p>

<p> <img src="http://ofw47ln5s.bkt.clouddn.com/sqlExp.jpg" alt="" /></p>

<p><strong>单个项目crash后部署指令</strong></p>

<p>通过asadmin deploy &ndash;name ［单个id<em>项目名称］&ndash;contextroot [单个id</em>单个项目名称] ~/RMP/[项目id]/[项目名称]/&hellip;(tab键提示补全)</p>

<p> <img src="http://ofw47ln5s.bkt.clouddn.com/redeployExp.jpg" alt="" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[javaScript读书笔记(一)]]></title>
    <link href="http://huyoyo.github.io/blog/2017/01/26/javascriptdu-shu-bi-ji-%5B%3F%5D/"/>
    <updated>2017-01-26T12:08:03+08:00</updated>
    <id>http://huyoyo.github.io/blog/2017/01/26/javascriptdu-shu-bi-ji-[?]</id>
    <content type="html"><![CDATA[<p>虽然写过一点前端的项目，但是一直在别人搭好的框架上进行coding。前端知识并不好，基础不牢总是要付出代价的TT.从头开始补基础，从javaScript开始。<!--more--></p>

<h4>设计意图</h4>

<p>javaScript最初设计意图就是为了在浏览器端中载入的Web页面和位于服务器上的应用程序之间提供脚本化的接口。</p>

<h4>阅读书目</h4>

<p>《javaScript学习指南》</p>

<h4>基础知识摘要</h4>

<p>最好保持脚本位置的一致性，要么全部放在head元素中，要么全部放在body元素的最末尾处</p>

<p>常见事件处理程序</p>

<pre><code>onclick     点击事件
onmouseover 当鼠标停留在某元素上触发
onmousemout 当鼠标离开某元素时触发
onfocus     当某元素获得焦点时触发
</code></pre>

<ul>
<li>document对象的所有目的时呈现整个页面，包括页面中的所有元素；</li>
<li>脚本引用example：<script type="text/javascript" src="test.js"></script></li>
<li>转义符 反斜杠 \</li>
<li>对于非ascii码－－encodeURI/encodeURIComponent对字符串进行编码，转换成URIencoding字符（decodeURI/decodeURIComponent）</li>
<li><code>双重否定符</code>（!!）可以用来显示地将数字或字符串转换为布尔值</li>
<li>javascript<code>除法</code>得到的结果是浮点型数字</li>
</ul>


<h4>Boolean对象</h4>

<ul>
<li><code>Boolean对象</code>实例，对象初始值为<code>空字符串</code>时候则对象的初始值将为<code>fasle</code>,任何<code>非空字符串</code>创建boolean对象实例初始值为<code>true</code>.</li>
</ul>


<h4>String对象</h4>

<ul>
<li>常用方法</li>
</ul>


<table>
        <tr>
            <th>方法</th>
            <th>描述</th>
            <th>参数</th>
          </tr>
        <tr>
            <th>contact</th>
            <th>连接字符串</th>
            <th>字符串参数，把该字符串连接到string对象的字面量字符串</th>
        </tr>
        <tr>
            <th>split</th>
            <th>根据特定的分割符，字符串分割</th>
            <th>分割符和分割最大数目</th>
                 </tr>
        <tr>
            <th>slice</th>
            <th>返回字符串的某个片段</th>
            <th>该片段的起始和结束位置</th>
                  </tr>
                    <tr>
            <th>toLowerCase
            toUpperCase</th>
            <th>大小写转换</th>
            <th>无</th>
                  </tr>
    </table>


<h4>正则表达式和RegExp</h4>

<ul>
<li>RegExp方法：test匹配考虑大小写，加i则忽略大小写,g表示全局匹配 /xxx/ig exec返回结果是一个数组，并存储圆括号包含的子字符串</li>
<li>＊表示前面*字符出现零次或多次；+前面字符出现一次或多次；？字符出现0次或1次；.表示字符只出现一次;^脱字符［<sup>0</sup>-9］表示非数字字符; ^和$表示一行的开始和结束;\w匹配任何数字字母字符，包括下划线[A-Za-z0-9];｜表示可以选择;｛｝表示前面字符重复的次数</li>
</ul>


<h4>FIFO队列</h4>

<pre><code>shift方法   移除数组第一个元素 
unshift方法 将元素添加到数组开
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[关于专利的杂想]]></title>
    <link href="http://huyoyo.github.io/blog/2016/10/17/post-title/"/>
    <updated>2016-10-17T16:21:47+08:00</updated>
    <id>http://huyoyo.github.io/blog/2016/10/17/post-title</id>
    <content type="html"><![CDATA[<h3>基于农业的本体知识库构建</h3>

<ul>
<li><p>应用场景</p>

<blockquote><p>来源于一个农产品的网页上架的，自动填写信息的启发</p>

<p>例如：拿到一个土豆，通过图像识别出这个产品是土豆（可能需要添加几个标签去区分是土豆而不是地瓜）</p>

<p>已经构建好的一个大的语义网,根据土豆这个词去search这个专有领域本体库中于这个相关连的概念（种类，功能，种植季节等）</p>

<p>服务反馈？－－按照概念（以标签的形式表示，供给用户选择）反馈信息，填写好对应的内容，并且做一次相关度推荐<!--more--></p></blockquote></li>
<li><p>流程描述</p>

<ol>
<li>网页抽取相对应的文本知识（wiki百科）得到本体中的概念</li>
<li>概念融合－1.依据相似度进行融合，设置经验阈值 2.本体推理－去找出关系，建立层级结构（树状或者网状）</li>
<li>得到基于农产品专有领域的语义网
<img src="http://ofw47ln5s.bkt.clouddn.com/16-10-31/1595354.jpg" alt="构造" /></li>
</ol>
</li>
<li><p>reference</p></li>
</ul>


<p> <img src="http://ofw47ln5s.bkt.clouddn.com/16-10-31/76112436.jpg" alt="农业本体和融合规则的知识融合框架" />
 <img src="http://ofw47ln5s.bkt.clouddn.com/16-10-31/59209975.jpg" alt="框架图" />
 <img src="http://ofw47ln5s.bkt.clouddn.com/16-10-31/32477478.jpg" alt="参考模型" /></p>

<ul>
<li><p>website</p>

<ol>
<li><a href="http://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=5659203">自适应提取方法</a></li>
<li><a href="http://www.cas.stc.sh.cn/jsjyup/pdf/2014/8/%E5%9F%BA%E4%BA%8E%E6%96%87%E7%8C%AE%E7%9A%84%E5%86%9C%E4%B8%9A%E9%A2%86%E5%9F%9F%E6%9C%AC%E4%BD%93%E8%87%AA%E5%8A%A8%E6%9E%84%E5%BB%BA%E6%96%B9%E6%B3%95%E7%A0%94%E7%A9%B6.pdf">基于文献的农业领域本体自动构建方法</a></li>
<li><a href="http://disi.unitn.it/~p2p/RelatedWork/Matching/Ge_SKG'08.pdf">Concept Similarity Matching Based on Semantic
Distance</a></li>
<li><a href="http://dl.ifip.org/db/conf/ifip12/ccta2012-1/JiangZYX12.pdf">method</a></li>
</ol>
</li>
</ul>

]]></content>
  </entry>
  
</feed>
