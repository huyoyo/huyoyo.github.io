<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: 读书笔记 | 胡某某同学]]></title>
  <link href="http://huyoyo.github.io/blog/categories/du-shu-bi-ji/atom.xml" rel="self"/>
  <link href="http://huyoyo.github.io/"/>
  <updated>2017-09-04T23:53:01+08:00</updated>
  <id>http://huyoyo.github.io/</id>
  <author>
    <name><![CDATA[胡某某同学啊]]></name>
    <email><![CDATA[hujieqiong@sjtu.edu.cn]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[记录一道面试题－柯里化(currying)]]></title>
    <link href="http://huyoyo.github.io/blog/2017/09/04/ji-lu-%5B%3F%5D-dao-mian-shi-ti-%5Bnil%5Dke-li-hua-currying/"/>
    <updated>2017-09-04T19:28:13+08:00</updated>
    <id>http://huyoyo.github.io/blog/2017/09/04/ji-lu-[?]-dao-mian-shi-ti-[nil]ke-li-hua-currying</id>
    <content type="html"><![CDATA[<p>&nbsp;&nbsp;大美团今日一面，首先是一道简答题，问一个add(x)函数可以打印出x的值，问add(1,2)会输出什么，如果是输出add(1)(2)呢？如何实现 add(1)(2)输出为3? 如果持续增加后续呢？（<strong>递归的一个函数列表调用</strong>），那么我们一个个解决吧～～<!--more--></p>

<h4>考点</h4>

<p>1.arguments参数数组的运用</p>

<p>2.函数式编程的了解</p>

<p>3.js数据类型的转换</p>

<p>4.console在输出的时候会自动调用什么函数</p>

<p>5.对闭包和链式调用的理解</p>

<p>6.自身想法，柯里化到底有什么用啊啊啊？！！！</p>

<h4>初级－打印输出结果</h4>

<pre><code class="javascript">function add1(){
  var args = [].slice.call(arguments); //重新拷贝一份
  console.log(args)} 
}

function add(x){
    console.log(arguments);
    console.log(x);
  }
  add1(1,2);//(2)[1,2]-&gt;{0:1,1:2,length:2,_proto_:Array[0]}
  add(1,2);//(2) [1, 2, callee: ƒ, Symbol(Symbol.iterator): ƒ，__proto__
:Object];1
  add(1)(2);//1;Uncaught TypeError: add(...) is not a function
</code></pre>

<p>&nbsp;&nbsp;我们可以看到调用函数设置不同参数的结果，<strong>add(1,2)</strong>实际考察的是<strong>arguments</strong>,它是一个类数组对象，它的属性名是按照传入参数的序列来的，第1个参数的属性名是’0’，第2个参数的属性名是’1’，以此类推，并且它还有<code>length</code>属性，存储的是当前传入函数参数的个数(实参)。从<strong>add(1,2)</strong>输出的打印<strong>arguments</strong>可以看到是由<code>Object</code>构造出来的。<strong>add1(1,2)</strong>和<strong>add(1,2)</strong>的区别在于，我们在一开始调用call函数进行拷贝（这里有深拷贝浅拷贝的坑，就不详细展开啦～），利用数组方法slice拷贝一份出来后，这个打印的结果<code>_proto_</code>就指向<code>Array</code>了，因为我们<code>call</code>了数组方法～。虽然失去一些特性和函数，但是基本数据还是在的，比如length，以及参数。</p>

<p>&nbsp;&nbsp;另外补充一点，<code>callee</code>是<strong>arguments</strong>对象中有一个非常有用的属性。<code>arguments.callee</code>返回此<strong>arguments</strong>对象所在的当前函数引用。在使用函数递归调用时推荐使用arguments.callee代替函数名本身。</p>

<pre><code class="javascript">function count(a){
    if(a==1){
        return 1;
    } 
    return a + arguments.callee(--a);
}

var mm = count(10);
alert(mm);//55;(1+2+3+4+...10)
</code></pre>

<h4>中级－－实现add(1)(2)</h4>

<p>&nbsp;&nbsp;直观的对这么个函数，可以认为是先调用add(1)得到一个返回结果－－返回结果是个函数啊－－继续调用一个；就是最后一个（）去返回你叠加的值，面试时候就是这么粗暴的答题，结果引起后续拓展的challenge了，哭哭TT</p>

<p>&nbsp;&nbsp;不管怎么样，先来一段粗暴的代码freestyle~</p>

<pre><code class="javascript">function add(x){
  return function(y){
   return x+y;
  }
}
add(1)(2)//1+2=3;
</code></pre>

<p>&nbsp;&nbsp;结果表明可以达到预期的输出，但是如果是实现一个参数个数任意的相加处理函数呢，楼上这个枚举肯定不行啊少年！那么一层一层，最后返回。这个不就是递归吗？？？我面试想到递归后，觉得那么出口在哪里？什么时候去return你一开始的这个参数啊。回来想明白了，当你参数是()时候，自然就表明这个递归结束了，这个就是出口啊！！！那么结合<strong>arguments</strong>，判断条件就是<code>length=0</code>,继续写一段代码：</p>

<pre><code class="javascript"> function add(x){
   sum=0;
   sum=sum+x;
  return function tempfunction(y){
    console.log(arguments);
    if(arguments.length===0)
    {
      return sum;
    }
    else{
     sum=sum+y;
     return tempfunction;

    }

  } 

 }
 console.log(add(1)(2));//有坑 输出都是函数字符串
 console.log(add(1)(2)())//3;
</code></pre>

<p>&nbsp;&nbsp;debug好久啊，并不知道为什么一开始。原来是add(1)(2)这样你的<code>length</code>一直是1啊！！所有加一个()作为返回结果的最终条件。我们还可以换一个写法，重写valueOf,toString。<strong>原理</strong>：其实原理都是使用闭包记住了<code>temp</code>中<code>x</code>的值，第一次调用add(),初始化了<code>temp</code>，并将<code>x</code>保存在<code>temp</code>的作用链中，然后返回<code>temp</code>保证了第二次调用的是<code>temp</code>函数，后面的计算都是在调用<code>temp</code>, 因为<code>temp</code>也是返回的自己，保证了第二次之后的调用也是调用<code>temp</code>，而在<code>temp</code>中将传入的参数与保存在作用链中x相加并付给sum，这样就保证了计算；但是在计算完成后还是返回了tmp这个函数，这样就获取不到计算的结果了，我们需要的结果是一个计算的数字那么怎么办呢，首先要知道JavaScript中，打印和相加计算，会分别调用toString或valueOf函数，所以我们重写tmp的toString和valueOf方法，返回sum的值；</p>

<p>(<strong>利用JS中对象到原始值的转换规则:当一个对象转换成原始值时，先查看对象是否有valueOf方法，如果有并且返回值是一个原始值，
那么直接返回这个值，否则没有valueOf或返回的不是原始值，那么调用toString方法，返回字符串表示</strong>.)</p>

<p>看代码：</p>

<pre><code class="javascript"> function add(x){
    var sum=0;
    sum=sum+x;
    var temp=function(y){
       if(arguments.length===0){
        return sum;
       }else{
        sum=sum+y;
        return temp;
       }
    }

    temp.toString=function(){
     return sum;
    }
    temp.valueOf=function(){
      return sum;
    }
    return temp;
 }
 console.log(add(1)(2)(3));//f 6 typeof看一下是个function
 console.log(+add(1)(2)(3));//Number类型强转化成数字,6
</code></pre>

<p>&nbsp;&nbsp;我们还可以换一个写法，不用那么多的var的临时变量，简单点，就是递归调用add啊～</p>

<pre><code class="javascript">function add(x){
   var temp=function tempfunction(y){  
   return add(x+y);
   }
   temp.toString=function(){
     return x;
   }
   temp.valueOf=function(){
     return x;
   }
   return temp
}
console.log(add(1)(2)(3));// f 6
console.log(+add(1)(2)(3));// 6
console.log(add(1,2,3)(2)(3));//6 并不是会1+2+3+2+3哦
</code></pre>

<h4>高阶－－柯里化</h4>

<p>&nbsp;&nbsp;柯里化这个概念，第一次是在头条面试看到(currying)面试官大佬打了个英文就说，算了。我们开个数组去重的题目吧呵呵呵＝ ＝（ps:数组去重写对了indexOf都不行，还有想到ES6的 Set()特性，头条大佬很任性啊！！！！！）拉回来，导致我并不知道这个高端词汇，</p>

<p>Google的解释如下：</p>

<blockquote><p>在计算机科学中，柯里化（英语：Currying），又译为卡瑞化或加里化，是把接受多个参数的函数变换成接受一个单一参数（最初函数的第一个参数）的函数，并且返回接受余下的参数而且返回结果的新函数的技术。
柯里化其实本身是固定一个可以预期的参数，并返回一个特定的函数，处理批特定的需求。这增加了函数的适用性，但同时也降低了函数的适用范围。</p></blockquote>

<p>&nbsp;&nbsp;我们返回来看前面那个坑！前面方法不适用于add(1,2,3)(1)(2)这种啊，只会输出结果为<code>1+1+2=4</code>因为我们就没有遍历我们的arguments数据的所有值啊，默认就是arguments[0]啊朋友们。
看个通用实现好吗～：</p>

<pre><code class="javascript">function currying(fn) {
     var slice = Array.prototype.slice,
     __args = slice.call(arguments, 1);
     return function () {
            var __inargs = slice.call(arguments);
          return fn.apply(null,  __args.concat(__inargs));
            };
        }
</code></pre>

<p>&nbsp;&nbsp;这段代码，首先是arguments调用slice方法去拷贝一份给_args，然后在返回的时候把arguments的参数连接起来用<code>concat</code>，重新生成一个数组，作为函数的返回值，这样最后得到一个新的参数数组。然后统一调用某一方法。由此我们可以实现如下代码:</p>

<pre><code class="javascript"> function add(){
    var arg=[].slice.call(arguments);
    var temp=function(){
      var inargs=[].slice.call(arguments);
      return add.apply(null,arg.concat(inagrs));
    }
    temp.toString=function(){
     return args.reduce(function(a,b){
     return a+b;
     });
    }
    return temp
 }
 console.log(add(1,2)(3)(4));//f 10
 console.log(+add(1,2)(3)(4));//10
</code></pre>

<p>&nbsp;&nbsp;感觉这个很清晰很赞啊，那么问题又来了这个在工程里面有什么好处啊？？每个东西都有存在理由吧？？知乎上的这个答题我觉得很有用，理解很透彻！</p>

<blockquote><p>工程上的柯里化主要就是为了统一接口，从而实现更高程度的抽象。先从大家熟悉的概念说起。在我们用oop编程的时候，这层抽象通常是用对象模型，通过继承并且使用基类的虚函数实现。通过继承，我们得到了一个统一的接口，于是只要能够适配基类的运算我们就可以相应的用子类来参与。在使用functional范式的时候，实现这层抽象用的就是柯里化。运算不再是适配基类，而是适配特定函数signature。</p></blockquote>

<h4>引申&ndash;参数复用</h4>

<p>&nbsp;&nbsp;当多次调用同一个函数，并且传递的参数绝大多数是相同的时候，那么该函数就是一个很好的柯里化候选。例如, 我们经常会用<code>Function.prototype.bind</code>方法来解决上述问题。</p>

<pre><code class="javascript">const obj = { name: 'test' };
const foo = function (prefix, suffix) {
    console.log(prefix + this.name + suffix);
}.bind(obj, 'currying-');

foo('-function'); // currying-test-function
</code></pre>

<p>与<code>call</code>/<code>apply</code>方法直接执行不同，<code>bind</code>方法将第一个参数设置为函数执行的上下文，其他参数依次传递给调用方法（函数的主体本身不执行，可以看成是延迟执行），并动态创建返回一个新的函数。这很符合柯里化的特征。下面来手动实现一下<code>bind</code>方法：</p>

<pre><code class="javascript">Function.prototype.bind = function (context, ...args) {
    return (...rest) =&gt; this.call(context, ...args, ...rest);
};
</code></pre>

<h4>总结</h4>

<p>&nbsp;&nbsp;一个面试题引申的知识点真的足够深，大美团面试的小姐姐真的很nice。说我还要更加系统的去展开问题，我觉得summary两个小时写的这个资料还远远不够。里面涉及的<code>apply</code>、<code>call</code>、<code>bind</code>的区别在下一篇文章里面展开吧，听说工程也不怎么用柯里化了，因为出来了<code>lambda</code>,能嵌入到其他表达式当中的匿名函数（闭包）。</p>

<ul>
<li><p>第一个重要意义是可以在表达式当中直接定义一个函数，而不需要将定义函数和表达式分开，这样有助于将逻辑用更紧凑的方式表达出来。</p></li>
<li><p>它的第二个重要意义是引入了闭包。基本上来说常见的支持lambda表达式的语言里，不存在不支持闭包的lambda表达式；从函数式编程的角度来说，支持闭包也是很重要的。闭包是指将当前作用域中的变量通过值或者引用的方式封装到lambda表达式当中，成为表达式的一部分，它使你的lambda表达式从一个普通的函数变成了一个带隐藏参数的函数。</p></li>
<li>它的第三个重要意义（如果有的话）是允许函数作为一个对象来进行传递。</li>
</ul>


<p>后续<code>lambda</code>怎么用，包括和<code>map</code>,<code>filter</code>,<code>reduce</code>一起合作写？知识点还要继续增强，我爱学习，学习使我快乐～我们下次继续实战加总结，再也不让博客长草了TT.</p>

<h4>Link</h4>

<ul>
<li><a href="https://segmentfault.com/q/1010000004499011">js函数参数列表返回的简单实现</a></li>
<li><a href="https://segmentfault.com/a/1190000008610969">实现add(1)(2)(3)</a></li>
<li><a href="http://www.css88.com/archives/5147/comment-page-1">实现类似于add(1)(2)(3)调用方式的方法</a></li>
<li><a href="http://www.cnblogs.com/coco1s/p/6509141.html">一道面试题引发的对javascript类型转换的思考</a></li>
<li><a href="http://www.cnblogs.com/pigtail/p/3447660.html">前端开发者进阶之函数柯里化Currying</a></li>
<li><a href="https://www.zhihu.com/question/37774367">柯里化在工程中有什么好处?</a></li>
<li><a href="https://msdn.microsoft.com/library/ff679975.aspx">reduce 方法 (Array)</a></li>
<li><a href="http://www.cnblogs.com/hustskyking/archive/2013/04/09/uncurrying.html">有趣的反科里化－－(待看)</a></li>
<li><a href="https://www.zhihu.com/question/20125256">Lambda 表达式有何用处？如何使用？－－（待看)</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[javaScript学习笔记(二)]]></title>
    <link href="http://huyoyo.github.io/blog/2017/03/12/javascriptbi-ji/"/>
    <updated>2017-03-12T10:57:09+08:00</updated>
    <id>http://huyoyo.github.io/blog/2017/03/12/javascriptbi-ji</id>
    <content type="html"><![CDATA[<p>最近心态不好，莫名其妙忙成狗啊。有项目压力，还要找符合自己的论文paper，最重要的是还有实习面试材料要准备。基础不牢靠背书啊啊啊啊，胡宝宝的心里压力“咚”大好嘛。趁着有时间，把看书的笔记摘摘～<!--more--></p>

<h4>阅读书目</h4>

<p>《javaScript学习指南》</p>

<h4>重点摘要</h4>

<ul>
<li>函数类型有三种：</li>
</ul>


<p><strong>声明式函数</strong> 拥有自己语句的函数，最开始是关键字function。声明型函数只会解析一次，它是静态的，并且只提供一个名称以便访问它；</p>

<pre><code>function add(m,n){
aler(m+n);
}
</code></pre>

<p>这种方式等同于构造一个function类的实例的方式:</p>

<pre><code>var add=new Function("m","n","alert(m+n);");
</code></pre>

<p>Function类构造方法的最后一个参数为函数体："alert(m+n);&ldquo;，前面的都是函数的形参，参数必须是字符串形式的："m&rdquo;,&ldquo;n"。</p>

<p><strong>匿名函数</strong> 使用构造函数创建的函数。每次访问它时都将解析一次，并且没有指定函数名称;(上述为举例说明)</p>

<pre><code>//创建一个函数，它的参数是一个数据对象和一个函数，
它将对这个数据对象调用该函数
function invokeFunction(dataObject,functionTocall)
{ functionTocall(dataObject);
}
var funCall=new Function('x','alert(x)');
invokeFunction('hello',funCall);
</code></pre>

<p><strong>函数字面量或函数表达式</strong> 在其他语句或表达式中创建的函数。它只会解析一次，它是静态的，可以指定也可以不制定一个特定的函数名称。如果它是已命名的，那么只能在其定义的函数体内访问它</p>

<pre><code>function outerFun(base){
   var test1="!";
   //返回内部函数
   return function(ext){
   return base+ext+test1;
   }
}
//调用事例：
var baseString=outerFun('hello ');
var newString=baseString('you ');
alert(newString);
//输出结果为： hello you !
</code></pre>

<p><code>javaScript闭包</code>:当一个内部函数是外部应用程序的返回值，并赋值给一个外部变量的时候，<strong>内部函数的作用域将附加到外部函数上</strong>然后再附加到主调应用程序中，这样才能保证<strong>内部函数和外部函数参数和变量的完整性</strong>返回再其他函数中以内部对象形式创建的一个函数字面量，然后将其赋值给主调应用程序中的一个变量，它将引入一个作用域链的概念，它是确保应用程序在本地能够正常工作所需的数据。</p>

<ul>
<li>浏览器兼容性检查通用方法</li>
</ul>


<p><strong>编写一段跨浏览器兼容代码，检查浏览器是否支持该元素</strong></p>

<p>测试一个是否支持HTML5 element,基本前提是：</p>

<pre><code>1. 使用document.createElement()动态创建该元素，判断浏览器是否支持它。
2. 测试新创建对象的一个已知属性或js方法是否存在，来判断是否浏览器真的支持该元素。
3. 对应input元素，设置你要测试的input元素的Type 属性，然后看浏览器是否保留该值。
</code></pre>

<p><strong>一个例子</strong></p>

<pre><code>//测试是否在style对象中实现了textShadow
var headerElement=doucument.getElementById("pageHeader");
headerElement.style.textShadow="#ff0000 2px 2px 3px";
</code></pre>

<ul>
<li>DOM Level2 事件模型</li>
</ul>


<p><strong>支持事件捕获（前远后近）和事件冒泡</strong>两种处理方式</p>

<pre><code>//level0和2指定一个事件的区别
document.onclick=clickFunc;
document.addEventListener("click", clickFunc,false);

//考虑代码能安全的运行在所有浏览器上   
if(document.addEventListener)
{
  document.addEventListener("click", clickFunc,false);
  }
  else if(document.attachEvent){
document.attachEvent("onclick", clickFunc); 
}else if(document.onclick)
{
 document.onclick=clickFunc;
  }
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[javaScript读书笔记(一)]]></title>
    <link href="http://huyoyo.github.io/blog/2017/01/26/javascriptdu-shu-bi-ji-%5B%3F%5D/"/>
    <updated>2017-01-26T12:08:03+08:00</updated>
    <id>http://huyoyo.github.io/blog/2017/01/26/javascriptdu-shu-bi-ji-[?]</id>
    <content type="html"><![CDATA[<p>虽然写过一点前端的项目，但是一直在别人搭好的框架上进行coding。前端知识并不好，基础不牢总是要付出代价的TT.从头开始补基础，从javaScript开始。<!--more--></p>

<h4>设计意图</h4>

<p>javaScript最初设计意图就是为了在浏览器端中载入的Web页面和位于服务器上的应用程序之间提供脚本化的接口。</p>

<h4>阅读书目</h4>

<p>《javaScript学习指南》</p>

<h4>基础知识摘要</h4>

<p>最好保持脚本位置的一致性，要么全部放在head元素中，要么全部放在body元素的最末尾处</p>

<p>常见事件处理程序</p>

<pre><code>onclick     点击事件
onmouseover 当鼠标停留在某元素上触发
onmousemout 当鼠标离开某元素时触发
onfocus     当某元素获得焦点时触发
</code></pre>

<ul>
<li>document对象的所有目的时呈现整个页面，包括页面中的所有元素；</li>
<li>脚本引用example：<script type="text/javascript" src="test.js"></script></li>
<li>转义符 反斜杠 \</li>
<li>对于非ascii码－－encodeURI/encodeURIComponent对字符串进行编码，转换成URIencoding字符（decodeURI/decodeURIComponent）</li>
<li><code>双重否定符</code>（!!）可以用来显示地将数字或字符串转换为布尔值</li>
<li>javascript<code>除法</code>得到的结果是浮点型数字</li>
</ul>


<h4>Boolean对象</h4>

<ul>
<li><code>Boolean对象</code>实例，对象初始值为<code>空字符串</code>时候则对象的初始值将为<code>fasle</code>,任何<code>非空字符串</code>创建boolean对象实例初始值为<code>true</code>.</li>
</ul>


<h4>String对象</h4>

<ul>
<li>常用方法</li>
</ul>


<table>
        <tr>
            <th>方法</th>
            <th>描述</th>
            <th>参数</th>
          </tr>
        <tr>
            <th>contact</th>
            <th>连接字符串</th>
            <th>字符串参数，把该字符串连接到string对象的字面量字符串</th>
        </tr>
        <tr>
            <th>split</th>
            <th>根据特定的分割符，字符串分割</th>
            <th>分割符和分割最大数目</th>
                 </tr>
        <tr>
            <th>slice</th>
            <th>返回字符串的某个片段</th>
            <th>该片段的起始和结束位置</th>
                  </tr>
                    <tr>
            <th>toLowerCase
            toUpperCase</th>
            <th>大小写转换</th>
            <th>无</th>
                  </tr>
    </table>


<h4>正则表达式和RegExp</h4>

<ul>
<li>RegExp方法：test匹配考虑大小写，加i则忽略大小写,g表示全局匹配 /xxx/ig exec返回结果是一个数组，并存储圆括号包含的子字符串</li>
<li>＊表示前面*字符出现零次或多次；+前面字符出现一次或多次；？字符出现0次或1次；.表示字符只出现一次;^脱字符［<sup>0</sup>-9］表示非数字字符; ^和$表示一行的开始和结束;\w匹配任何数字字母字符，包括下划线[A-Za-z0-9];｜表示可以选择;｛｝表示前面字符重复的次数</li>
</ul>


<h4>FIFO队列</h4>

<pre><code>shift方法   移除数组第一个元素 
unshift方法 将元素添加到数组开
</code></pre>
]]></content>
  </entry>
  
</feed>
